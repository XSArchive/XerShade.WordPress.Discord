<?php
/**
 * DESCRIPTION
 *
 * @link https://github.com/XerShade/XerShade.WordPress.Discord
 * @package XerShade.WordPress.Discord
 */

namespace XerShade\WordPress\OAuth;

use XerShade\WordPress\WordPress_Plugin;

require_once plugin_dir_path( __FILE__ ) . 'class-wordpress-plugin.php';

if ( ! class_exists( 'XerShade\WordPress\OAuth\WordPress_OAuth' ) ) {
	/**
	 * Undocumented class
	 */
	class WordPress_OAuth {
		/**
		 * The name of the service that this OAuth client connects to.
		 *
		 * @var string $service The name of the service that this OAuth client connects to.
		 */
		protected $service;
		/**
		 * The parent class that owns this OAuth class.
		 *
		 * @var WordPress_Discord $parent The parent class that owns this OAuth class.
		 */
		protected $parent;
		/**
		 * Tells the class if it should enable OAuth related features.
		 *
		 * @var bool $oauth_enabled Tells the class if it should enable OAuth related features.
		 */
		protected $oauth_enabled;
		/**
		 * The redirect uri that the service sends the user to after authenticating.
		 *
		 * @var string $redirect_uri The redirect uri that the service sends the user to after authenticating.
		 */
		protected $redirect_uri;
		/**
		 * The OAuth client application id.
		 *
		 * @var string $client_id The OAuth client application id.
		 */
		protected $client_id;
		/**
		 * The OAuth client secret key.
		 *
		 * @var string $client_secret The OAuth client secret key.
		 */
		protected $client_secret;

		/**
		 * Undocumented function
		 *
		 * @param string           $service The name of the service that this OAuth client connects to.
		 * @param WordPress_Plugin $parent The parent class that owns this OAuth class.
		 */
		public function __construct( string $service, WordPress_Plugin $parent ) {
			$this->service       = sanitize_key( $service );
			$this->parent        = $parent;
			$this->client_id     = get_option( $this->service . '_oauth_client_id', '' );
			$this->client_secret = get_option( $this->service . '_oauth_client_secret', '' );
			$this->oauth_enabled = get_option( $this->service . '_oauth_enabled', false );
			$this->redirect_uri  = get_option( $this->service . '_oauth_redirect_uri', get_site_url() . '/wp-admin/admin-ajax.php?action=' . $this->service . '_oauth_callback' );

			if ( $this->oauth_enabled && $this->redirect_uri ) {
				add_action( 'login_form', array( $this, 'render_oauth_login_button' ) );
				add_action( 'wp_ajax_' . $this->service . '_oauth_callback', array( $this, 'handle_oauth_callback' ) );
				add_action( 'wp_ajax_nopriv_' . $this->service . '_oauth_callback', array( $this, 'handle_oauth_callback' ) );
				add_action( 'show_user_profile', array( $this, 'render_user_settings' ) );
				add_action( 'edit_user_profile', array( $this, 'render_user_settings' ) );
			}
		}

		/**
		 * Stores the provided OAuth client id and secret key in the OAuth service.
		 * These may not be necessary in some services, or provided in another way hence why this step is optional.
		 *
		 * @param string $client_id The OAuth client application id.
		 * @param string $client_secret The OAuth client secret key.
		 * @return WordPress_OAuth Returns this class instance.
		 */
		public function attach_keys( $client_id, $client_secret ) {
			if ( $client_id !== $this->client_id ) {
				$this->client_id = $client_id;
				update_option( $this->service . '_oauth_client_id', $this->client_id );
			}

			if ( $client_secret !== $this->client_secret ) {
				$this->client_secret = $client_secret;
				update_option( $this->service . '_oauth_client_secret', $this->client_secret );
			}

			return $this;
		}

		/**
		 * Assigns the redirect uri that the service sends the user to after authenticating.
		 *
		 * @param string $redirect_uri The redirect uri that the service sends the user to after authenticating.
		 * @return WordPress_OAuth Returns this class instance.
		 */
		public function assign_redirect_uri( $redirect_uri ) {
			$this->redirect_uri = $redirect_uri;
			update_option( $this->service . '_oauth_redirect_uri', $this->redirect_uri );

			return $this;
		}

		/**
		 * Enables the OAuth service.
		 *
		 * @return WordPress_OAuth Returns this class instance.
		 */
		public function enable() {
			$this->oauth_enabled = true;
			update_option( $this->service . '_oauth_enabled', $this->oauth_enabled );

			return $this;
		}

		/**
		 * Disables the OAuth service.
		 *
		 * @return WordPress_OAuth Returns this class instance.
		 */
		public function disable() {
			$this->oauth_enabled = true;
			update_option( $this->service . '_oauth_enabled', $this->oauth_enabled );

			return $this;
		}

		/**
		 * Generates the OAuth login button to display on the login form.
		 *
		 * @return void
		 */
		public function render_oauth_login_button() {
			// TODO -> This variable needs to be generated by the service class that inherits this class.
			$discord_login_url = 'https://discord.com/oauth2/authorize?client_id=' . $this->client_id . '&redirect_uri=' . rawurlencode( $this->redirect_uri ) . '&response_type=code&scope=identify email';
			echo '<p id="' . tag_escape( $this->service ) . '-login-button"><a class="button" style="margin: 0 6px 16px 0; width: 100%; text-align: center;" href="' . esc_url( $discord_login_url ) . '">Log in with Discord</a></p>';
		}

		/**
		 * Handles any callbacks from Discord.
		 *
		 * @return void
		 */
		public function handle_oauth_callback() {

			if ( isset( $_GET['code'] ) ) {
				$token_url  = 'https://discord.com/api/oauth2/token';
				$token_data = array(
					'client_id'     => $this->client_id,
					'client_secret' => $this->client_secret,
					'grant_type'    => 'authorization_code',
					'code'          => sanitize_text_field( wp_unslash( $_GET['code'] ) ),
					'redirect_uri'  => $this->redirect_uri,
					'scope'         => 'identify email',
				);

				$response   = wp_safe_remote_post( $token_url, array( 'body' => $token_data ) );
				$body       = wp_remote_retrieve_body( $response );
				$token_info = json_decode( $body, true );

				if ( isset( $token_info['access_token'] ) ) {
					$user_info_url = 'https://discord.com/api/v10/users/@me';
					$headers       = array(
						'Authorization' => 'Bearer ' . $token_info['access_token'],
					);

					$user_response = wp_safe_remote_get( $user_info_url, array( 'headers' => $headers ) );
					$user_body     = wp_remote_retrieve_body( $user_response );
					$user_info     = json_decode( $user_body, true );

					$user_id = $this->parent->get_user_id_by_discord_id( $user_info['id'] );

					if ( $user_id ) {
						wp_set_auth_cookie( $user_id );
					} else {
						if ( is_user_logged_in() ) {
							update_user_meta( get_current_user_id(), 'discord_id', $user_info['id'] );
						} else {
							$username = sanitize_user( $user_info['username'] );
							$email    = sanitize_email( $user_info['email'] );
							$user_id  = wp_create_user( $username, wp_generate_password(), $email );

							update_user_meta( $user_id, 'discord_id', $user_info['id'] );

							wp_set_auth_cookie( $user_id );
						}
					}
				}
			}

			wp_safe_redirect( home_url() );
			exit;
		}

		/**
		 * TEMPORARY: Renders the OAuth settings page when called.
		 *
		 * @return void
		 */
		public function render_settings_page() {
			?>
				<h2><?php ucwords( $this->service ); ?> OAuth Settings</h2>
				<table class="form-table">
					<tr>
						<th scope="row"><label>Client ID</label></th>
						<td><?php echo esc_attr( $this->client_id ); ?></td>
					</tr>
					<tr>
						<th scope="row"><label>Client Secret</label></th>
						<td><?php echo esc_attr( $this->client_secret ); ?></td>
					</tr>
					<tr>
						<th scope="row"><label for="discord_enable_oauth">Enable Discord OAuth</label></th>
						<td>
							<input type="checkbox" name="discord_enable_oauth" id="discord_enable_oauth" <?php checked( $this->oauth_enabled, true ); ?>>
							<label for="discord_enable_oauth">Enable Discord OAuth authentication.</label>
						</td>
					</tr>
					<tr>
						<th scope="row"><label for="discord_redirect_uri">Redirect URI</label></th>
						<td><input type="text" readonly="true" name="discord_redirect_uri" id="discord_redirect_uri" value="<?php echo esc_attr( $this->redirect_uri ); ?>" class="regular-text"></td>
					</tr>
				</table>
			<?php
		}

		/**
		 * Renders the plugin settings on the user's profile page.
		 *
		 * @param WP_User $user The current WP_User object.
		 * @return void
		 */
		public function render_user_settings( $user ) {
			if ( get_user_meta( $user->ID, 'discord_id', true ) ) {
				if ( current_user_can( 'edit_user', $user->ID ) && isset( $_GET['unlink_discord'] ) && intval( sanitize_text_field( wp_unslash( $_GET['unlink_discord'] ) ) ) === $user->ID ) {
					delete_user_meta( $user->ID, 'discord_id' );
				}
			}

			if ( get_user_meta( $user->ID, 'discord_id', true ) ) {
				?>
			<h3>Unlink Discord Account</h3>
			<table class="form-table">
				<tr>
					<th></th>
					<td>
						<a href="<?php echo esc_url( add_query_arg( 'unlink_discord', $user->ID ) ); ?>" class="button">Unlink Discord Account</a>
						<p class="description">Click this button to unlink your Discord account.</p>
					</td>
				</tr>
			</table>
				<?php
			} else {
				if ( $this->client_id && $this->redirect_uri ) {
					$discord_authorize_url = "https://discord.com/oauth2/authorize?client_id={$this->client_id}&redirect_uri=" . rawurlencode( $this->redirect_uri ) . '&response_type=code&scope=identify email';
					?>
			<h3>Link Discord Account</h3>
			<table class="form-table">
				<tr>
					<th></th>
					<td>
						<a href="<?php echo esc_url( $discord_authorize_url ); ?>" class="button">Link Discord Account</a>
						<p class="description">Click this button to link your Discord account.</p>
					</td>
				</tr>
			</table>
					<?php
				}
			}
		}
	}
}
